{
  "time": 1713762750044,
  "blocks": [
    {
      "id": "mhTl6ghSkV",
      "type": "paragraph",
      "data": {
        "text": "Hey. Meet the new Editor. On this picture you can see it in action. Then, try a demo ðŸ¤“"
      }
    },
    {
      "id": "l98dyx3yjb",
      "type": "header",
      "data": {
        "text": "Key features",
        "level": 3
      }
    },
    {
      "id": "os_YI4eub4",
      "type": "list",
      "data": {
        "type": "unordered",
        "items": [
          "It is a block-style editor",
          "It returns clean data output in JSON",
          "Designed to be extendable and pluggable with a <a href=\"https://editorjs.io/creating-a-block-tool\">simple API</a>"
        ]
      }
    },
    {
      "id": "1yKeXKxN7-",
      "type": "header",
      "data": {
        "text": "What does it mean Â«block-styled editorÂ»",
        "level": 3
      }
    },
    {
      "id": "TcUNySG15P",
      "type": "paragraph",
      "data": {
        "text": "Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc. Each of them is an independent <sup data-tune=\"footnotes\">1</sup> contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core."
      },
      "tunes": {
        "footnotes": [
          "It works more stable then in other WYSIWYG editors. Same time it has smooth and well-known arrow navigation behavior like classic editors."
        ]
      }
    },
    {
      "id": "M3UXyblhAo",
      "type": "header",
      "data": {
        "text": "What does it mean clean data output?",
        "level": 3
      }
    },
    {
      "id": "KOcIofZ3Z1",
      "type": "paragraph",
      "data": {
        "text": "There are dozens of ready-to-use Blocks and a simple API <sup data-tune=\"footnotes\">2</sup> for creating any Block you need. For example, you can implement Blocks for Tweets, Instagram posts, surveys and polls, CTA buttons, and even games."
      },
      "tunes": {
        "footnotes": [
          "Just take a look at our Creating Block Tool guide. You'll be surprised."
        ]
      }
    },
    {
      "id": "ksCokKAhQw",
      "type": "paragraph",
      "data": {
        "text": "Classic WYSIWYG editors produce raw HTML-markup with both content data and content appearance. On the contrary, <mark class=\"cdx-marker\">Editor.js outputs JSON object</mark> with data of each Block."
      }
    },
    {
      "id": "XKNT99-qqS",
      "type": "attaches",
      "data": {
        "file": {
          "url": "https://drive.google.com/user/catalog/my-file.pdf",
          "size": 12902,
          "name": "file.pdf",
          "extension": "pdf"
        },
        "title": "My file"
      }
    },
    {
      "id": "7RosVX2kcH",
      "type": "paragraph",
      "data": {
        "text": "Given data can be used as you want: render with HTML for Web clients, render natively for mobile apps, create the markup for Facebook Instant Articles or Google AMP, generate an audio version, and so on."
      }
    },
    {
      "id": "eq06PsNsab",
      "type": "paragraph",
      "data": {
        "text": "Clean data is useful to sanitize, validate and process on the backend."
      }
    },
    {
      "id": "hZAjSnqYMX",
      "type": "image",
      "data": {
        "file": {
          "url": "assets/codex2x.png"
        },
        "withBorder": false,
        "withBackground": false,
        "stretched": true,
        "caption": "CodeX Code Camp 2019"
      }
    },
    {
      "id": "example1",
      "type": "snippet",
      "outdated": true,
      "obsolete": false,
      "data": {
        "text": "module.exports.registerUser = async function(req, res){\n    let client_cred = req.params.credential;\n    \n    try{\n        let client = await Client.findOne({apiKey: client_cred}).populate('users');\n        try{\n            let isUser = await client.users.find((user) => user.phone == req.body.phone);\n            // let user = client.users.find((user) => user.phone == userNum);\n            if(!isUser){\n                let newUser = await User.create({\n                    name: req.body.name,\n                    email: req.body.email,\n                    phone: req.body.phone,\n                    clientID: client._id\n                });\n                client.users.push(newUser._id);\n                await client.save();\n                return res.json(200,{\n                    success: false,\n                    message: \"User not found\",\n                    user: newUser\n                })\n            }\n        }catch(err){\n            console.log(err);\n            return res.json(409,{\n                success: false,\n                message: \"User Already Registered\",\n            })\n        }\n    }catch(err){\n        console.log(err);\n        return res.json(404,{\n            message: \"Error in finding Client\",\n            error: err\n        })\n    }\n}",
        "path": "test_code_files/config_controller.js",
        "line_start": 78,
        "line_end": 115
      }
    },
    {
      "id": "example2",
      "type": "path",
      "category": "file",
      "outdated": false,
      "data": {
        "path": "dir_test/test.js"
      }
    },
    {
      "id": "example3",
      "type": "code-tag",
      "outdated": true,
      "obsolete": false,
      "data": {
        "text": "let client = await Client.findOne({apiKey: client_cred}).populate('users');",
        "tag": "Client",
        "path": "test_code_files/process_controller.js",
        "line_start": 49,
        "line_end": 49
      }
    }
    
  ]
}